<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.springboot.nhy.mapper.ProductMapper">
	<select id="selectAllProduct" resultType="java.util.HashMap">
		SELECT product_id, product_name, product_price, SUM(product_stock) as product_stock
		FROM 
			(
				SELECT product.product_id, product.product_name, product.product_price, ifnull(SUM(product_receiving.receiving_num),0) AS product_stock
				FROM product
				LEFT OUTER JOIN product_receiving 
				ON product.product_id =  product_receiving.product_id 
				GROUP BY product.product_id, product.product_name, product.product_price
				
				UNION all
				
				SELECT product.product_id, product.product_name, product.product_price, ifnull(SUM(product_sell.product_num)*-1,0) AS product_stock
				FROM product
				LEFT OUTER JOIN product_sell
				ON product.product_id =  product_sell.product_id 
				GROUP BY product.product_id, product.product_name, product.product_price
			)A
		GROUP BY product_id, product_name, product_price
	</select>
	<select id="searchProduct" resultType="java.util.HashMap">
		SELECT product_id, product_name, product_price, SUM(product_stock) as product_stock
		FROM 
			(
				SELECT product.product_id, product.product_name, product.product_price, ifnull(SUM(product_receiving.receiving_num),0) AS product_stock
				FROM product
				LEFT OUTER JOIN product_receiving 
				ON product.product_id =  product_receiving.product_id 
				GROUP BY product.product_id, product.product_name, product.product_price
				
				UNION all
				
				SELECT product.product_id, product.product_name, product.product_price, ifnull(SUM(product_sell.product_num)*-1,0) AS product_stock
				FROM product
				LEFT OUTER JOIN product_sell
				ON product.product_id =  product_sell.product_id 
				GROUP BY product.product_id, product.product_name, product.product_price
			)A
		GROUP BY product_id, product_name, product_price
		HAVING product_name LIKE '%${product_name}%'
	</select>
	<select id="getCurrentProductStock" resultType="int">
		SELECT SUM(product_stock) as product_stock
		FROM 
			(
				SELECT product.product_id, product.product_name, product.product_price, ifnull(SUM(product_receiving.receiving_num),0) AS product_stock
				FROM product
				LEFT OUTER JOIN product_receiving 
				ON product.product_id =  product_receiving.product_id 
				GROUP BY product.product_id, product.product_name, product.product_price
				
				UNION all
				
				SELECT product.product_id, product.product_name, product.product_price, ifnull(SUM(product_sell.product_num)*-1,0) AS product_stock
				FROM product
				LEFT OUTER JOIN product_sell
				ON product.product_id =  product_sell.product_id 
				GROUP BY product.product_id, product.product_name, product.product_price
			)A
		GROUP BY product_id, product_name, product_price
		HAVING product_id = #{product_id}
	</select>
	<insert id="sellProduct">
		insert into product_sell
		values(#{sell_no}, #{product_id}, #{user_id}, #{product_num}, #{sales_user_id}, #{sell_date})
	</insert>
	<select id="selectAllSellProduct" resultType="java.util.HashMap">
		SELECT  sell_no, 
				user_id, 
				COUNT(*) AS sales_num, 
				sales_user_id, 
				sell_date 
		FROM product_sell
		GROUP BY sell_no, user_id, sales_user_id, sell_date
	</select>
	<select id="selectSellProductDetails" resultType="java.util.HashMap">
		SELECT  product_sell.product_id, product.product_name, product.product_price, product_sell.product_num
		FROM product_sell, product
		WHERE product_sell.product_id = product.product_id
		AND product_sell.sell_no = #{sell_no}
	</select>
	<select id="selectReceivingProductDetails" resultType="java.util.HashMap">
		SELECT product_receiving.product_id, product.product_name, product.product_price, product_receiving.receiving_num
		FROM product_receiving, product
		WHERE product_receiving.product_id = product.product_id
		AND product_receiving.receiving_order = #{receiving_order}
	</select>
	<insert id="receivingProduct">
		insert into product_receiving
		values(#{product_id}, #{receiving_order}, #{product_num}, #{receiving_user_id}, #{receiving_date})
	</insert>
	<!-- <select id="list" resultType="com.study.springboot.Emp">
		select * from emp_temp
	</select>
	<insert id="write">
		insert into emp_temp(empno, ename, job, sal)
		values (#{empno},#{ename},#{job},#{sal})
	</insert>
	<select id="viewOne" resultType="com.study.springboot.Emp">
		select * from emp_temp where empno = #{empno}
	</select>
	<update id="update">
		update emp_temp
		set ename = #{ename},
			job=#{job},
			sal=#{sal}
		where empno=#{empno}
	</update> -->
</mapper>